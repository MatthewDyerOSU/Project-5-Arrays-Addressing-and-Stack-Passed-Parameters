Microsoft (R) Macro Assembler Version 14.29.30146.0	    11/15/22 14:11:45
<Project 5: Arrays, Addressing, and Stack Passed Parameters   Page 1 - 1


				TITLE Project 5: Arrays, Addressing, and Stack Passed Parameters     (Proj5_dyerma.asm)

				; Author: Matthew Dyer
				; Last Modified: 11/14/22
				; OSU email address: dyerma@oregonstate.edu
				; Course number/section:   CS271/Fall 2022
				; Project Number: 5              Due Date: 11/20/22
				; Description: This program will introduce itself by supplying the program title and author.
				;	Then it will generate ARRAYSIZE amount of numbers between LO and HI, inclusive. The program
				;	will then sort those numbers in ascending order, display the median of the list of numbers,
				;	then display the sorted list. Lastly the program will count up each instance of each number,
				;	and display those counts starting with the lowest value. The program will end with an outtro,
				;	thanking the user for using the program.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 000000C8			ARRAYSIZE = 200
 = 0000000F			LO = 15
 = 00000032			HI = 50

 00000000			.data

				; (insert variable definitions here)
 00000000 47 65 6E 65 72	intro1			BYTE	"Generating, Sorting, and Counting Random Integers! Programmed by Matthew Dyer",13,10,13,10,
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 49 6E 74 65
	   67 65 72 73 21
	   20 50 72 6F 67
	   72 61 6D 6D 65
	   64 20 62 79 20
	   4D 61 74 74 68
	   65 77 20 44 79
	   65 72 0D 0A 0D
	   0A 54 68 69 73
	   20 70 72 6F 67
	   72 61 6D 20 67
	   65 6E 65 72 61
	   74 65 73 20 32
	   30 30 20 72 61
	   6E 64 6F 6D 20
	   69 6E 74 65 67
	   65 72 73 20 62
	   65 74 77 65 65
	   6E 20 31 35 20
	   61 6E 64 20 35
	   30 2C 20 69 6E
	   63 6C 75 73 69
	   76 65 2E 00
									"This program generates 200 random integers between 15 and 50, inclusive.",0
 0000009A 49 74 20 74 68	intro2			BYTE	"It then displays the original list, sorts the list, displays the median value of the list,",13,10,
	   65 6E 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6F 72 69 67
	   69 6E 61 6C 20
	   6C 69 73 74 2C
	   20 73 6F 72 74
	   73 20 74 68 65
	   20 6C 69 73 74
	   2C 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6D 65 64 69 61
	   6E 20 76 61 6C
	   75 65 20 6F 66
	   20 74 68 65 20
	   6C 69 73 74 2C
	   0D 0A 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6C 69 73 74 20
	   73 6F 72 74 65
	   64 20 69 6E 20
	   61 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2C 20 61 6E 64
	   20 66 69 6E 61
	   6C 6C 79 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 69 6E 73
	   74 61 6E 63 65
	   73 0D 0A 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 76 61 6C 75
	   65 2C 20 73 74
	   61 72 74 69 6E
	   67 20 77 69 74
	   68 20 74 68 65
	   20 6C 6F 77 65
	   73 74 20 6E 75
	   6D 62 65 72 2E
	   0D 0A 00
									"displays the list sorted in ascending order, and finally displays the number of instances",13,10,
									"of each generated value, starting with the lowest number.",13,10,0
 0000018D  000000C8 [		randArray		DWORD	ARRAYSIZE	DUP(?)
	    00000000
	   ]
 000004AD 20 00			space			BYTE	" ",0
 000004AF 59 6F 75 72 20	unsortedString	BYTE	"Your unsorted random numbers:",0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 00
 000004CD 54 68 65 20 6D	medianString	BYTE	"The median value of the array: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000004ED 59 6F 75 72 20	sortedString	BYTE	"Your sorted random numbers:",0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 00
 00000509 59 6F 75 72 20	instanceString	BYTE	"Your list of instances of each generated number, starting with the smallest value:",0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 73 6D 61
	   6C 6C 65 73 74
	   20 76 61 6C 75
	   65 3A 00
 0000055C 47 6F 6F 64 62	outtro			BYTE	"Goodbye, and thanks for using my program!",13,10,0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 0D 0A 00
 00000588  00000024 [		countArray		DWORD	(HI-LO)+1	DUP(0)	
	    00000000
	   ]
 00000618 00000024		countLength		DWORD	LENGTHOF countArray
 00000000			.code

 00000000			main PROC

				; Initialize starting seed value of the RandomRange procedure
 00000000  E8 00000000 E		CALL	Randomize

				; Introduce the title and author, and describe the program
 00000005  68 00000000 R		PUSH	OFFSET	intro1
 0000000A  68 0000009A R		PUSH	OFFSET	intro2
 0000000F  E8 000000AD			CALL	introduction

				; Generate ARRAYSIZE random numbers between LO and HI inclusive, and store them consecutively in an array
 00000014  68 0000018D R		PUSH	OFFSET	randArray
 00000019  E8 000000C6			CALL	fillArray

				; Loop through randArray and print all numbers, 10 per line
 0000001E  68 000000C8			PUSH	ARRAYSIZE
 00000023  68 0000018D R		PUSH	OFFSET	randArray
 00000028  68 000004AD R		PUSH	OFFSET	space
 0000002D  68 000004AF R		PUSH	OFFSET	unsortedString
 00000032  E8 0000017D			CALL	displayList
 00000037  E8 00000000 E		CALL	CrLf

				; Sort randArray in ascending order
 0000003C  68 0000018D R		PUSH	OFFSET	randArray
 00000041  E8 000000CB			CALL	sortList

				; Calculate the median number and display it
 00000046  68 0000018D R		PUSH	OFFSET	randArray
 0000004B  68 000004CD R		PUSH	OFFSET	medianString
 00000050  E8 00000107			CALL	displayMedian
 00000055  E8 00000000 E		CALL	CrLf
 0000005A  E8 00000000 E		CALL	CrLf

				; Display the sorted array
 0000005F  68 000000C8			PUSH	ARRAYSIZE
 00000064  68 0000018D R		PUSH	OFFSET	randArray
 00000069  68 000004AD R		PUSH	OFFSET	space
 0000006E  68 000004ED R		PUSH	OFFSET	sortedString
 00000073  E8 0000013C			CALL	displayList
 00000078  E8 00000000 E		CALL	CrLf

				; Count each instance of each number and place those counts in new array (countArray)
 0000007D  68 00000588 R		PUSH	OFFSET	countArray
 00000082  68 0000018D R		PUSH	OFFSET	randArray
 00000087  E8 00000175			CALL	countList

				; Display countArray
 0000008C  FF 35 00000618 R		PUSH	countLength
 00000092  68 00000588 R		PUSH	OFFSET	countArray
 00000097  68 000004AD R		PUSH	OFFSET	space
 0000009C  68 00000509 R		PUSH	OFFSET	instanceString
 000000A1  E8 0000010E			CALL	displayList
 000000A6  E8 00000000 E		CALL	CrLf
 000000AB  E8 00000000 E		CALL	CrLf

				; Goodbye to user
 000000B0  68 0000055C R		PUSH	OFFSET	outtro
 000000B5  E8 0000017F			CALL	goodbye

					Invoke ExitProcess,0	; exit to operating system
 000000BA  6A 00	   *	    push   +000000000h
 000000BC  E8 00000000 E   *	    call   ExitProcess
 000000C1			main ENDP

				;-----------------------------------------------------------------------------------------
				; Name: introduction
				;
				; Introduces the user to the program with title, author name, and description of program
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives: intro1 and intro2 by reference
				;
				; Returns: None
				;
				;-----------------------------------------------------------------------------------------
 000000C1			introduction PROC
 000000C1  55				PUSH	EBP
 000000C2  8B EC			MOV		EBP, ESP
 000000C4  52				PUSH	EDX
 000000C5  8B 55 0C			MOV		EDX, [EBP+12]
 000000C8  E8 00000000 E		CALL	WriteString
 000000CD  E8 00000000 E		CALL	CrLf
 000000D2  8B 55 08			MOV		EDX, [EBP+8]
 000000D5  E8 00000000 E		CALL	WriteString
 000000DA  E8 00000000 E		CALL	CrLf
 000000DF  5A				POP		EDX
 000000E0  5D				POP		EBP
 000000E1  C2 0008			RET		8
 000000E4			introduction ENDP
				;-----------------------------------------------------------------------------------------

				;-----------------------------------------------------------------------------------------
				; Name: fillArray
				;
				; Generates random numbers within inclusive bounds of LO to HI, ARRAYSIZE amount of times,
				;	filling randArray.	
				;
				; Preconditions: array filled with DWORDS
				;
				; Postconditions: NONE
				;
				; Receives: empty randArray by reference
				;
				; Returns: filled randArray by reference
				;
				;-----------------------------------------------------------------------------------------
 000000E4			fillArray PROC
 000000E4  55				PUSH	EBP	
 000000E5  8B EC			MOV		EBP, ESP
 000000E7  50				PUSH	EAX
 000000E8  51				PUSH	ECX
 000000E9  57				PUSH	EDI
 000000EA  B9 000000C8			MOV		ECX, ARRAYSIZE
 000000EF  8B 7D 08			MOV		EDI, [EBP+8]
 000000F2				_fillLoop:
				; Subtract LO from HI and add 1, take that number and generate a random one between 0 and that number,
				;	then add LO to random number. This will give number between LO and HI, inclusive
 000000F2  B8 00000032				MOV		EAX, HI
 000000F7  83 E8 0F				SUB		EAX, LO
 000000FA  40					INC		EAX				
 000000FB  E8 00000000 E			CALL	RandomRange
 00000100  83 C0 0F				ADD		EAX, LO
 00000103  89 07				MOV		[EDI], EAX
 00000105  83 C7 04				ADD		EDI, 4
 00000108  E2 E8				LOOP	_fillLoop
 0000010A  5F				POP		EDI
 0000010B  59				POP		ECX
 0000010C  58				POP		EAX
 0000010D  5D				POP		EBP
 0000010E  C2 0004			RET		4
 00000111			fillArray ENDP
				;-----------------------------------------------------------------------------------------

				;-----------------------------------------------------------------------------------------
				; Name: sortList
				;
				; Takes randArray and bubble sorts it in ascending order, returning a sorted array.
				;
				; Preconditions: array filled with DWORDS
				;
				; Postconditions: None
				;
				; Receives: unsorted randArray by reference
				;
				; Returns: sorted randArray by reference
				;
				;-----------------------------------------------------------------------------------------
 00000111			sortList PROC
 00000111  55				PUSH	EBP
 00000112  8B EC			MOV		EBP, ESP
 00000114  56				PUSH	ESI
 00000115  51				PUSH	ECX
 00000116  52				PUSH	EDX
 00000117				_sortLoop:
 00000117  BA 00000000				MOV		EDX, 0			; Exchange made boolean, 1 if exchange was made, 0 if not
 0000011C  8B 75 08				MOV		ESI, [EBP+8]
 0000011F  B9 000000C8				MOV		ECX, ARRAYSIZE
 00000124  49					DEC		ECX
 00000125					_exchangeLoop:
 00000125  8B 06					MOV		EAX, [ESI]
 00000127  3B 46 04					CMP		EAX, [ESI+4]
 0000012A  7E 0B					JLE		_noExchange
				; Push the array onto the stack as a by reference param for exhangeElements, set EDX to 1 to flag as exchange made
 0000012C  56						PUSH	ESI
 0000012D  E8 00000016					CALL	exchangeElements
 00000132  BA 00000001					MOV		EDX, 1

 00000137						_noExchange:
 00000137  83 C6 04						ADD		ESI, 4
 0000013A  E2 E9						LOOP	_exchangeLoop
				; If EDX is 1, an exchange was made, so start the loop again
 0000013C  83 FA 01					CMP		EDX, 1
 0000013F  74 D6					JE		_sortLoop

 00000141  5A				POP		EDX
 00000142  59				POP		ECX
 00000143  5E				POP		ESI
 00000144  5D				POP		EBP
 00000145  C2 0004			RET		4
 00000148			sortList ENDP
				;-----------------------------------------------------------------------------------------

				;-----------------------------------------------------------------------------------------
				; Name: exchangeElements
				;
				; Exchanges adjacent elements in an array
				;
				; Preconditions: DWORD sized elements
				;
				; Postconditions: None
				;
				; Receives:	randArray by reference
				;
				; Returns: randArray by reference
				;
				;-----------------------------------------------------------------------------------------
 00000148			exchangeElements PROC
 00000148  55				PUSH	EBP
 00000149  8B EC			MOV		EBP, ESP
 0000014B  8B 75 08			MOV		ESI, [EBP+8]
 0000014E  8B 06			MOV		EAX, [ESI]
 00000150  8B 5E 04			MOV		EBX, [ESI+4]
 00000153  89 46 04			MOV		[ESI+4], EAX
 00000156  89 1E			MOV		[ESI], EBX
 00000158  5D				POP		EBP
 00000159  C2 0004			RET		4
 0000015C			exchangeElements ENDP
				;-----------------------------------------------------------------------------------------

				;-----------------------------------------------------------------------------------------
				; Name: displayMedian
				;
				; Finds and displays the median element in array. If array has odd amount of elements, 
				;	finds the middle element. If array has even amount of elements, finds the middle 2
				;	elements, and finds the average between them, rounding up.
				;
				; Preconditions: DWORD sized elements
				;
				; Postconditions: None
				;
				; Receives: randArray by reference, medianString by reference
				;
				; Returns: Writes median found to terminal
				;
				;-----------------------------------------------------------------------------------------
 0000015C			displayMedian PROC
 0000015C  55				PUSH	EBP
 0000015D  8B EC			MOV		EBP, ESP
 0000015F  56				PUSH	ESI
 00000160  50				PUSH	EAX
 00000161  53				PUSH	EBX
 00000162  52				PUSH	EDX
 00000163  8B 75 0C			MOV		ESI, [EBP+12]
				; Check if ARRAYSIZE is even or odd
 00000166  B8 000000C8			MOV		EAX, ARRAYSIZE
 0000016B  BB 00000002			MOV		EBX, 2
 00000170  99				CDQ
 00000171  F7 F3			DIV		EBX
 00000173  83 FA 00			CMP		EDX, 0
 00000176  74 0B			JE		_isEven
				; If odd, find the middle element
 00000178  8B 55 08			MOV		EDX, [EBP+8]
 0000017B  8B 86 00000190		MOV		EAX, [ESI+((4*ARRAYSIZE+1)/2)]
 00000181  EB 1F			JMP		_medianFound
 00000183				_isEven:
 00000183  8B 86 00000190			MOV		EAX, [ESI+4*ARRAYSIZE/2]
 00000189  8B 9E 00000194			MOV		EBX, [ESI+(4*ARRAYSIZE/2)+4]		; EAX = middle element, EBX = middle element +1	
 0000018F  03 C3				ADD		EAX, EBX
 00000191  BB 00000002				MOV		EBX, 2
 00000196  99					CDQ
 00000197  F7 F3				DIV		EBX
 00000199  83 FA 01				CMP		EDX, 1			; we divide by 2 so if remainder (EDX) is 1, then decimal would end in .5, so round up
 0000019C  75 01				JNE		_dontRound
 0000019E  40					INC		EAX
 0000019F					_dontRound:
 0000019F  8B 55 08					MOV		EDX, [EBP+8]
 000001A2				_medianFound:
 000001A2  E8 00000000 E			CALL	WriteString
 000001A7  E8 00000000 E			CALL	WriteDec
 000001AC  5A					POP		EDX
 000001AD  5B					POP		EBX
 000001AE  58					POP		EAX
 000001AF  5E					POP		ESI
 000001B0  5D					POP		EBP
 000001B1  C2 0008				RET		8
 000001B4			displayMedian ENDP
				;-----------------------------------------------------------------------------------------

				;-----------------------------------------------------------------------------------------
				; Name: displayList
				;
				; Displays the array to the terminal, 20 elements per line, each with 1 space between them.
				;
				; Preconditions: DWORD sized elements
				;
				; Postconditions: None
				;
				; Receives: someTitle string and space string by reference, someArray by reference,
				;	someArraySize by value
				;
				; Returns: Writes list to terminal
				;
				;-----------------------------------------------------------------------------------------
 000001B4			displayList PROC
 000001B4  55				PUSH	EBP
 000001B5  8B EC			MOV		EBP, ESP
 000001B7  50				PUSH	EAX
 000001B8  53				PUSH	EBX
 000001B9  51				PUSH	ECX
 000001BA  52				PUSH	EDX
 000001BB  56				PUSH	ESI
 000001BC  BB 00000000			MOV		EBX, 0
 000001C1  8B 75 10			MOV		ESI, [EBP+16]
 000001C4  8B 55 08			MOV		EDX, [EBP+8]
 000001C7  8B 4D 14			MOV		ECX, [EBP+20]
 000001CA  E8 00000000 E		CALL	WriteString
 000001CF  E8 00000000 E		CALL	CrLf
 000001D4  8B 55 0C			MOV		EDX, [EBP+12]
 000001D7				_displayLoop:
 000001D7  8B 06				MOV		EAX, [ESI]
 000001D9  E8 00000000 E			CALL	WriteDec
 000001DE  E8 00000000 E			CALL	WriteString
 000001E3  83 C6 04				ADD		ESI, 4
 000001E6  43					INC		EBX
 000001E7  83 FB 14				CMP		EBX, 20
 000001EA  7C 0A				JL		_noNewLine
 000001EC  E8 00000000 E			CALL	CrLf
 000001F1  BB 00000000				MOV		EBX, 0
 000001F6					_noNewLine:
 000001F6  E2 DF					LOOP	_displayLoop
 000001F8  5E				POP		ESI
 000001F9  5A				POP		EDX
 000001FA  59				POP		ECX
 000001FB  5B				POP		EBX
 000001FC  58				POP		EAX
 000001FD  5D				POP		EBP
 000001FE  C2 0008			RET		8	
 00000201			displayList ENDP
				;-----------------------------------------------------------------------------------------

				;-----------------------------------------------------------------------------------------
				; Name: countList
				;
				; Counts the instances of each element in a provided array, and places those counts in a new
				;	array.
				;
				; Preconditions: DWORD sized elements
				;
				; Postconditions: None
				;
				; Receives: randArray by reference
				;
				; Returns: countArray by reference
				;
				;-----------------------------------------------------------------------------------------
 00000201			countList PROC
 00000201  55				PUSH	EBP
 00000202  8B EC			MOV		EBP, ESP
 00000204  56				PUSH	ESI
 00000205  57				PUSH	EDI
 00000206  50				PUSH	EAX
 00000207  53				PUSH	EBX
 00000208  51				PUSH	ECX
 00000209  8B 75 08			MOV		ESI, [EBP+8]	; randArray
 0000020C  8B 7D 0C			MOV		EDI, [EBP+12]	; countArray
 0000020F  BB 0000000F			MOV		EBX, LO
 00000214  B9 000000C8			MOV		ECX, ARRAYSIZE
 00000219				_countLoop:
 00000219  8B 06				MOV		EAX, [ESI]
 0000021B  83 C6 04				ADD		ESI, 4
 0000021E  3B C3				CMP		EAX, EBX
 00000220  75 06				JNE		_noMatch
 00000222  FF 07				INC		DWORD PTR [EDI]
 00000224  8B 17				MOV		EDX, [EDI]
 00000226  EB 06				JMP		_matchFound
 00000228					_noMatch:
 00000228  83 C7 04					ADD		EDI, 4
 0000022B  FF 07					INC		DWORD PTR [EDI]
 0000022D  43						INC		EBX
 0000022E					_matchFound:
 0000022E  E2 E9					LOOP	_countLoop
 00000230  59				POP		ECX
 00000231  5B				POP		EBX
 00000232  58				POP		EAX
 00000233  5F				POP		EDI
 00000234  5E				POP		ESI
 00000235  5D				POP		EBP
 00000236  C2 0008			RET		8
 00000239			countList ENDP
				;-----------------------------------------------------------------------------------------

				;-----------------------------------------------------------------------------------------
				; Name: goodbye
				;
				; Says goodbye to the user
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives: outtro string by reference
				;
				; Returns: Writes outtro to terminal
				;
				;-----------------------------------------------------------------------------------------
 00000239			goodbye	PROC
 00000239  55				PUSH	EBP
 0000023A  8B EC			MOV		EBP, ESP
 0000023C  52				PUSH	EDX
 0000023D  8B 55 08			MOV		EDX, [EBP+8]
 00000240  E8 00000000 E		CALL	WriteString
 00000245  5D				POP		EBP
 00000246  C2 0004			RET		4
 00000249			goodbye ENDP
				;-----------------------------------------------------------------------------------------

				END main
Microsoft (R) Macro Assembler Version 14.29.30146.0	    11/15/22 14:11:45
<Project 5: Arrays, Addressing, and Stack Passed Parameters   Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000061C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000249 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 00000201 _TEXT	Length= 00000038 Public STDCALL
  _countLoop . . . . . . . . . .	L Near	 00000219 _TEXT	
  _noMatch . . . . . . . . . . .	L Near	 00000228 _TEXT	
  _matchFound  . . . . . . . . .	L Near	 0000022E _TEXT	
displayList  . . . . . . . . . .	P Near	 000001B4 _TEXT	Length= 0000004D Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 000001D7 _TEXT	
  _noNewLine . . . . . . . . . .	L Near	 000001F6 _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000015C _TEXT	Length= 00000058 Public STDCALL
  _isEven  . . . . . . . . . . .	L Near	 00000183 _TEXT	
  _dontRound . . . . . . . . . .	L Near	 0000019F _TEXT	
  _medianFound . . . . . . . . .	L Near	 000001A2 _TEXT	
exchangeElements . . . . . . . .	P Near	 00000148 _TEXT	Length= 00000014 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000E4 _TEXT	Length= 0000002D Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 000000F2 _TEXT	
goodbye  . . . . . . . . . . . .	P Near	 00000239 _TEXT	Length= 00000010 Public STDCALL
introduction . . . . . . . . . .	P Near	 000000C1 _TEXT	Length= 00000023 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C1 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000111 _TEXT	Length= 00000037 Public STDCALL
  _sortLoop  . . . . . . . . . .	L Near	 00000117 _TEXT	
  _exchangeLoop  . . . . . . . .	L Near	 00000125 _TEXT	
  _noExchange  . . . . . . . . .	L Near	 00000137 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countArray . . . . . . . . . . .	DWord	 00000588 _DATA	
countLength  . . . . . . . . . .	DWord	 00000618 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instanceString . . . . . . . . .	Byte	 00000509 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000009A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianString . . . . . . . . . .	Byte	 000004CD _DATA	
outtro . . . . . . . . . . . . .	Byte	 0000055C _DATA	
randArray  . . . . . . . . . . .	DWord	 0000018D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortedString . . . . . . . . . .	Byte	 000004ED _DATA	
space  . . . . . . . . . . . . .	Byte	 000004AD _DATA	
unsortedString . . . . . . . . .	Byte	 000004AF _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
